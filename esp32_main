#include <Arduino.h>
#include <BluetoothSerial.h>
#include "esp_bt_main.h"
#include "esp_bt_device.h"
#include "esp_gap_bt_api.h"

// UART Communication Pins
#define RX_PIN 3
#define TX_PIN 1
#define MEGA_RX_PIN 16
#define MEGA_TX_PIN 17
#define MP3_1_RX_PIN 18
#define MP3_1_TX_PIN 19
#define MP3_2_RX_PIN 21
#define MP3_2_TX_PIN 22

// Bluetooth Setup
BluetoothSerial SerialBT;
bool bluetoothEnabled = false;
bool bluetoothScanning = false;

#define touchscreen Serial2
#define mega Serial1
HardwareSerial mp3Player1(1); // MP3 Player 1
HardwareSerial mp3Player2(2); // MP3 Player 2

// YX5300 MP3 Command Structure
void sendMP3Command(HardwareSerial &mp3Player, uint8_t command, uint8_t param1, uint8_t param2) {
    uint8_t buffer[8] = {0x7E, 0xFF, 0x06, command, 0x00, param1, param2, 0xEF};
    mp3Player.write(buffer, 8);
}

void handleBluetoothCommand(String command) {
    touchscreen.print("Unhandled Bluetooth Command: ");
    touchscreen.println(command);
}

void startBluetoothScan() {
    touchscreen.println("BT_SCANNING_STARTED");
    esp_bt_gap_start_discovery(ESP_BT_INQ_MODE_GENERAL_INQUIRY, 10, 0); // Scan for 10 seconds
}

void pairBluetoothDevice(String deviceName) {
    touchscreen.print("ATTEMPTING_PAIRING_WITH: ");
    touchscreen.println(deviceName);
    touchscreen.println("PAIRING_SUCCESSFUL");
}

// Device Discovery Callback
void btScanCallback(esp_bt_gap_cb_event_t event, esp_bt_gap_cb_param_t *param) {
    if (event == ESP_BT_GAP_DISC_RES_EVT) {
        char bda_str[18];
        snprintf(bda_str, sizeof(bda_str), "%02x:%02x:%02x:%02x:%02x:%02x",
                 param->disc_res.bda[0], param->disc_res.bda[1], param->disc_res.bda[2],
                 param->disc_res.bda[3], param->disc_res.bda[4], param->disc_res.bda[5]);

        touchscreen.print("FOUND_DEVICE: ");
        touchscreen.println(bda_str);
    } else if (event == ESP_BT_GAP_DISC_STATE_CHANGED_EVT && param->disc_st_chg.state == ESP_BT_GAP_DISCOVERY_STOPPED) {
        touchscreen.println("BT_SCAN_COMPLETE");
    }
}

void setup() {
    Serial.begin(115200);           // Main serial for debugging
    touchscreen.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);  // UART to touchscreen ESP32
    mega.begin(9600, SERIAL_8N1, MEGA_RX_PIN, MEGA_TX_PIN); // UART to Arduino Mega
    mp3Player1.begin(9600, SERIAL_8N1, MP3_1_RX_PIN, MP3_1_TX_PIN); // MP3 Player 1
    mp3Player2.begin(9600, SERIAL_8N1, MP3_2_RX_PIN, MP3_2_TX_PIN); // MP3 Player 2

    // Bluetooth Setup
    SerialBT.begin("ESP32_Brain");
    bluetoothEnabled = true;

    // Initialize Bluetooth GAP for scanning
    esp_bluedroid_init();
    esp_bluedroid_enable();
    esp_bt_gap_register_callback(btScanCallback);
}

void loop() {
    // Bluetooth Command Handling
    if (SerialBT.available()) {
        String command = SerialBT.readString();
        handleBluetoothCommand(command);
    }

    // UART Command Handling from Touchscreen ESP32
    if (touchscreen.available()) {
        String incomingData = touchscreen.readString();
        handleUARTCommand(incomingData);
    }

    // UART Command Handling from Arduino Mega
    if (mega.available()) {
        String incomingData = mega.readString();
        handleMegaCommand(incomingData); // New function for Mega data processing
    }
}

// Handles UART Commands from Touchscreen ESP32
void handleUARTCommand(String command) {
    command.trim();

    if (command == "SCAN_BLUETOOTH") {
        startBluetoothScan();
    } else if (command.startsWith("PAIR_BLUETOOTH_")) {
        String deviceName = command.substring(15);
        pairBluetoothDevice(deviceName);
    }

    else if (command.startsWith("LANTERN_")) {
        SerialBT.println(command); // Forward lantern commands via Bluetooth
    }

    else {
        mega.println(command); // Forward all other commands directly to Mega
    }

    // Feedback to touchscreen ESP32
    touchscreen.print("COMMAND_RECEIVED: ");
    touchscreen.println(command);
}

// Handles Commands from the Mega to ESP32 Brain
void handleMegaCommand(String command) {
    command.trim();

    if (command.startsWith("LANTERN_")) {
        SerialBT.println(command); // Forward lantern commands via Bluetooth
    } else {
        touchscreen.println("UNKNOWN_MEGA_COMMAND");
    }
}
