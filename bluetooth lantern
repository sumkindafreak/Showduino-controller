#include <WiFi.h>                     // Library to connect ESP32 to WiFi networks
#include <AsyncUDP.h>                 // Library to easily use UDP messages (for wireless commands)
#include <Adafruit_NeoPixel.h>        // Library to control addressable RGB LEDs (like WS2812 "NeoPixels")

#define LED_PIN 26                    // The digital pin on your board where the LED strip is connected
#define NUM_PIXELS 7                  // How many LEDs are in your lantern/strip
Adafruit_NeoPixel lantern(NUM_PIXELS, LED_PIN, NEO_GRB + NEO_KHZ800); // Set up the LEDs

// WiFi network info (change these to match your network)
const char* ssid = "Gore FX Network";     // Name of your WiFi network
const char* password = "showduino2025";   // Password for your WiFi

AsyncUDP udp;                         // Create a UDP object for network messages
 
 
 
  bool wifiConnected = false;  // Track if WiFi was successfully connected




// --- Function Prototypes ---
// These are just declarations so the compiler knows all the functions you'll use
void flickerEffect(int speed);
void glowEffect(uint8_t red, uint8_t green, uint8_t blue, int speed);
void colorShiftEffect(int speed);
void blackoutEffect();
void strobeEffect(int speed, int count);
void fadeOnEffect(int red, int green, int blue, int speed);
void fadeOffEffect(int red, int green, int blue, int speed);
void pulseEffect(int red, int green, int blue, int speed);
void fireflyEffect(int red, int green, int blue, int speed);
void flameDanceEffect(int speed);
void lightningEffect(int speed);
void candleDripEffect(int red, int green, int blue, int speed);
void emberBurnEffect(int speed);
void bloodDripEffect(int speed);
void electricalSurgeEffect(int speed);
void ghostlyPulseEffect(int speed);
void infernoEffect(int speed);
void mistEffect(int speed);
void pumpkinFlickerEffect(int speed);
void policeStrobeEffect(int speed);
void eyesWatchingEffect(int speed);
void smolderingEmbersEffect(int speed);
void explosionBurstEffect(int speed);
void dimensionalRiftEffect(int speed);
void witchesBrewEffect(int speed);
void viralOutbreakEffect(int speed);
void hellfireEffect(int speed);
void drowningEffect(int speed);
void skullFlickerEffect(int speed);
void lanternGlowEffect(int speed);
void totalDarknessEffect(int speed);
void zombieCreepEffect(int speed);
void spiderWebEffect(int speed);
void magneticPulseEffect(int speed);
void starburstEffect(int speed);
void shadowCreepEffect(int speed);
void iceStormEffect(int speed);
void graveyardGlowEffect(int speed);

// ------------------------------------------------------
//                     SETUP
// ------------------------------------------------------
void setup() {
  Serial.begin(115200);            
  lantern.begin();                 
  lantern.clear();                 
  lantern.show();                  

  WiFi.begin(ssid, password);      
  Serial.print("Connecting to showduino");

  unsigned long startAttempt = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttempt < 10000) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    wifiConnected = true;
    Serial.println("\nConnected!");

    if (udp.listen(1234)) {
      Serial.println("Listening for UDP commands on port 1234...");
      udp.onPacket([](AsyncUDPPacket packet) {
        String data = (char*)packet.data();
        data.trim();                           
        data.toUpperCase();                    
        Serial.printf("Received: %s\n", data.c_str());
        handleCommand(data);                   
      });
    }
  } else {
    Serial.println("\nWiFi connection failed. Running fallback glow effect.");
    wifiConnected = false;
  }
}


void loop() {



   if (!wifiConnected) {
    // Fallback effect if no WiFi
    flickerEffect(500);
  }










}


// ------------------------------------------------------
//                COMMAND HANDLER
// ------------------------------------------------------
// This function gets called whenever a UDP command comes in
void handleCommand(String command) {
  // If the command is GLOW: followed by 3 numbers (red, green, blue)
  if (command.startsWith("GLOW:")) {
    int r, g, b;
    sscanf(command.c_str(), "GLOW:%d,%d,%d", &r, &g, &b);
    glowEffect(r, g, b, 20);
  }
  // If command is FADEON: with 4 numbers (red, green, blue, speed)
  else if (command.startsWith("FADEON:")) {
    int r, g, b, s;
    sscanf(command.c_str(), "FADEON:%d,%d,%d,%d", &r, &g, &b, &s);
    fadeOnEffect(r, g, b, s);
  }
  // If command is FADEOFF: with 4 numbers (red, green, blue, speed)
  else if (command.startsWith("FADEOFF:")) {
    int r, g, b, s;
    sscanf(command.c_str(), "FADEOFF:%d,%d,%d,%d", &r, &g, &b, &s);
    fadeOffEffect(r, g, b, s);
  }
  // If command is STROBE: with 2 numbers (speed, count)
  else if (command.startsWith("STROBE:")) {
    int s, c;
    sscanf(command.c_str(), "STROBE:%d,%d", &s, &c);
    strobeEffect(s, c);
  }
  // If command is DRIP: with 4 numbers (red, green, blue, speed)
  else if (command.startsWith("DRIP:")) {
    int r, g, b, s;
    sscanf(command.c_str(), "DRIP:%d,%d,%d,%d", &r, &g, &b, &s);
    candleDripEffect(r, g, b, s);
  }

  // Simple commands just by name - these run their effect with a typical speed
  else if (command == "FLICKER") flickerEffect(30);
  else if (command == "BLACKOUT") blackoutEffect();
  else if (command == "COLORSHIFT") colorShiftEffect(30);
  else if (command == "BLOODDRIP") bloodDripEffect(50);
  else if (command == "SURGE") electricalSurgeEffect(50);
  else if (command == "GHOST") ghostlyPulseEffect(50);
  else if (command == "INFERNO") infernoEffect(50);
  else if (command == "MIST") mistEffect(50);
  else if (command == "PUMPKIN") pumpkinFlickerEffect(50);
  else if (command == "POLICE") policeStrobeEffect(100);
  else if (command == "EYES") eyesWatchingEffect(80);
  else if (command == "SMOLDER") smolderingEmbersEffect(50);
  else if (command == "RIFT") dimensionalRiftEffect(70);
  else if (command == "BREW") witchesBrewEffect(70);
  else if (command == "VIRUS") viralOutbreakEffect(50);
  else if (command == "HELLFIRE") hellfireEffect(60);
  else if (command == "DROWN") drowningEffect(20);
  else if (command == "SKULL") skullFlickerEffect(80);
  else if (command == "LANTERN") lanternGlowEffect(50);
  else if (command == "DARKNESS") totalDarknessEffect(500);
  else if (command == "ZOMBIE") zombieCreepEffect(70);
  else if (command == "SPIDER") spiderWebEffect(90);
  else if (command == "MAGNETIC") magneticPulseEffect(40);
  else if (command == "STARBURST") starburstEffect(40);
  else if (command == "SHADOW") shadowCreepEffect(50);
  else if (command == "ICESTORM") iceStormEffect(60);
  else if (command == "GRAVEYARD") graveyardGlowEffect(60);
  else if (command == "EXPLOSION") explosionBurstEffect(20);
  else Serial.println("Unknown command."); // If none of the above, print error
}

// ------------------------------------------------------
//                  FX FUNCTIONS
// ------------------------------------------------------
//
// Each of these functions makes a different lighting effect for the lantern
// They are called by name from handleCommand()
// If you want to change the effect, you can edit them!
//
// Comments are added to help you understand what each one does.

void fadeOnEffect(int red, int green, int blue, int speed) {
  // Fade from off to the given color
  for (int brightness = 0; brightness <= 255; brightness += 5) {
    for (int i = 0; i < NUM_PIXELS; i++) {
      lantern.setPixelColor(i, lantern.Color(
        (red * brightness) / 255,
        (green * brightness) / 255,
        (blue * brightness) / 255
      ));
    }
    lantern.show();
    delay(speed); // Wait a short time before making it brighter
  }
}

void fadeOffEffect(int red, int green, int blue, int speed) {
  // Fade from the given color back to off
  for (int brightness = 255; brightness >= 0; brightness -= 5) {
    for (int i = 0; i < NUM_PIXELS; i++) {
      lantern.setPixelColor(i, lantern.Color(
        (red * brightness) / 255,
        (green * brightness) / 255,
        (blue * brightness) / 255
      ));
    }
    lantern.show();
    delay(speed);
  }
}

void flickerEffect(int speed) {
  // Each LED flickers with a random orange/yellow color, like a candle
  for (int i = 0; i < NUM_PIXELS; i++) {
    int flicker = random(100, 255); // Random brightness for each LED
    lantern.setPixelColor(i, lantern.Color(flicker, random(30, 80), 0));
  }
  lantern.show();
  delay(speed); // Wait a little before the next flicker
}

void glowEffect(uint8_t red, uint8_t green, uint8_t blue, int speed) {
  // All LEDs pulse smoothly between dim and bright in the chosen color
  static float brightness = 30;
  static float direction = 3;

  brightness += direction;
  if (brightness >= 255 || brightness <= 30) direction *= -1;

  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(
      (red * brightness) / 255, 
      (green * brightness) / 255, 
      (blue * brightness) / 255
    ));
  }
  lantern.show();
  delay(speed);
}

void blackoutEffect() {
  // Instantly turns off all LEDs
  lantern.clear(); 
  lantern.show();
}

void totalDarknessEffect(int speed) {
  // Turns off all LEDs and waits (useful for timed blackouts)
  lantern.clear();
  lantern.show();
  delay(speed);
}

void strobeEffect(int speed, int count) {
  // Flashes all LEDs on and off quickly, like a strobe light
  for (int i = 0; i < count; i++) {
    for (int j = 0; j < NUM_PIXELS; j++) {
      lantern.setPixelColor(j, lantern.Color(255, 255, 255)); // All white
    }
    lantern.show();
    delay(speed);

    lantern.clear(); 
    lantern.show();
    delay(speed);
  }
}

void colorShiftEffect(int speed) {
  // Smoothly shifts the color of all LEDs through the rainbow
  static int hue = 0;

  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.ColorHSV(hue, 255, 150)); // HSV gives smooth rainbow
  }

  hue += 200;  // Higher = faster color changes
  if (hue >= 65535) hue = 0; // Loop back to start

  lantern.show();
  delay(speed);
}

void flameDanceEffect(int speed) {
  // LEDs randomly flicker in orange/yellow like a campfire
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(200, 255), random(50, 150), 0));
  }
  lantern.show();
  delay(speed);
}

void lightningEffect(int speed) {
  // All LEDs flash white, then go dark, like lightning
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(255, 255, 255));
  }
  lantern.show();
  delay(speed);
  lantern.clear();
  lantern.show();
  delay(random(200, 600)); // Random lightning pause
}

void emberBurnEffect(int speed) {
  // Flickers between orange and red, like hot embers
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(150, 255), random(20, 80), 0));
  }
  lantern.show();
  delay(speed);
}

void bloodDripEffect(int speed) {
  // Lights up each LED in red, one after another (like dripping blood)
  lantern.clear();  // Start with all off

  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(150, 0, 0)); // Dark red
    lantern.show();
    delay(speed);  // Wait between drips
  }

  delay(500);  // Pause to let it "drip" stay on
}

void electricalSurgeEffect(int speed) {
  // A few quick white flashes to simulate an electrical surge
  const int flickerCount = 5; // How many flashes

  for (int i = 0; i < flickerCount; i++) {
    for (int j = 0; j < NUM_PIXELS; j++) {
      lantern.setPixelColor(j, lantern.Color(255, 255, 255)); // All white
    }
    lantern.show();
    delay(speed);

    lantern.clear(); // Off between flashes
    lantern.show();
    delay(random(50, 200));
  }
}

void ghostlyPulseEffect(int speed) {
  // LEDs fade in and out with a blue-ish white, like a ghost
  static int brightness = 0;
  static int direction = 5;

  brightness += direction;
  if (brightness >= 150 || brightness <= 10) direction *= -1;

  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color((brightness * 150) / 255, 0, (brightness * 255) / 255));
  }

  lantern.show();
  delay(speed);
}

void infernoEffect(int speed) {
  // Intense, shifting orange/yellow (like a raging fire)
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(200, 255), random(50, 100), 0));
  }
  lantern.show();
  delay(speed);
}

void mistEffect(int speed) {
  // LEDs randomly glow blueish-white, like mist
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(150, 255), random(200, 255), random(200, 255)));
  }
  lantern.show();
  delay(speed);
}

void pumpkinFlickerEffect(int speed) {
  // Orange flicker, like a jack-o-lantern
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(200, 255), random(80, 100), 0));
  }
  lantern.show();
  delay(random(speed / 2, speed * 2));
}

void policeStrobeEffect(int speed) {
  // Alternates between red and blue, like police lights
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(255, 0, 0)); // Red
  }
  lantern.show();
  delay(speed);

  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(0, 0, 255)); // Blue
  }
  lantern.show();
  delay(speed);
}

void eyesWatchingEffect(int speed) {
  // Lights just the first and last LED in red, like glowing eyes in the dark
  lantern.clear();
  lantern.setPixelColor(0, lantern.Color(255, 0, 0));  // Left eye
  lantern.setPixelColor(6, lantern.Color(255, 0, 0));  // Right eye (for 7 LEDs)
  lantern.show();
  delay(speed);
  lantern.clear();
  lantern.show();
}

void smolderingEmbersEffect(int speed) {
  // Dim orange-yellow flicker, like smoldering coals
  for (int i = 0; i < NUM_PIXELS; i++) {
    int ember = random(100, 200);
    lantern.setPixelColor(i, lantern.Color(ember, ember / 4, 0));
  }
  lantern.show();
  delay(speed);
}

void explosionBurstEffect(int speed) {
  // All LEDs flash white quickly, then turn off
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(255, 255, 255)); // All white
  }
  lantern.show();
  delay(200); // Short burst
  lantern.clear();
  lantern.show();
}

void dimensionalRiftEffect(int speed) {
  // Random blue/green colors, like a sci-fi rift opening
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(0, 80), random(150, 255), random(200, 255)));
  }
  lantern.show();
  delay(speed);
}

void witchesBrewEffect(int speed) {
  // Purples and greens, like a bubbling witch's brew
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(60, 100), random(0, 150), random(150, 255)));
  }
  lantern.show();
  delay(speed);
}

void viralOutbreakEffect(int speed) {
  // Toxic green glowing in and out
  static int brightness = 50;
  static int direction = 5;

  brightness += direction;
  if (brightness >= 255 || brightness <= 30) direction *= -1;

  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(0, brightness, 0)); // Green
  }

  lantern.show();
  delay(speed);
}

void hellfireEffect(int speed) {
  // Rapid flickering orange/yellow
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(150, 255), random(0, 80), 0));
  }
  lantern.show();
  delay(random(speed / 2, speed * 2));
}

void drowningEffect(int speed) {
  // Slowly fades in a deep blue, like sinking underwater
  for (int brightness = 0; brightness <= 255; brightness += 10) {
    for (int i = 0; i < NUM_PIXELS; i++) {
      lantern.setPixelColor(i, lantern.Color(0, 0, brightness)); // Blue
    }
    lantern.show();
    delay(speed);
  }
}

void skullFlickerEffect(int speed) {
  // Flickers two LEDs (like glowing eyes in a skull)
  lantern.clear();
  lantern.setPixelColor(1, lantern.Color(180, 180, 255)); // Left Eye
  lantern.setPixelColor(5, lantern.Color(180, 180, 255)); // Right Eye
  lantern.show();
  delay(random(speed / 2, speed * 2));
  lantern.clear();
  lantern.show();
}

void zombieCreepEffect(int speed) {
  // Sickly green/yellow random flicker
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(random(80, 150), random(100, 200), 0));
  }
  lantern.show();
  delay(speed);
}

void spiderWebEffect(int speed) {
  // Randomly lights a few LEDs in white, like glinting web strands
  lantern.clear();
  for (int i = 0; i < 3; i++) {
    lantern.setPixelColor(random(NUM_PIXELS), lantern.Color(200, 200, 200));
  }
  lantern.show();
  delay(speed);
}

void magneticPulseEffect(int speed) {
  // Lights from the center out, then off, like a magnetic pulse
  for (int i = 0; i < NUM_PIXELS / 2; i++) {
    lantern.setPixelColor(3 + i, lantern.Color(255, 255, 255)); // Center outward
    lantern.setPixelColor(3 - i, lantern.Color(255, 255, 255));
    lantern.show();
    delay(speed);
  }
  lantern.clear();
  lantern.show();
}

void starburstEffect(int speed) {
  // Lights from the center out, then off, like a star burst
  for (int i = 0; i < NUM_PIXELS / 2; i++) {
    lantern.setPixelColor((NUM_PIXELS / 2) + i, lantern.Color(255, 255, 200));
    lantern.setPixelColor((NUM_PIXELS / 2) - i, lantern.Color(255, 255, 200));
    lantern.show();
    delay(speed);
  }

  lantern.clear();
  lantern.show();
}

void shadowCreepEffect(int speed) {
  // One by one, LEDs go dark (like a shadow spreading)
  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(0, 0, 0)); // Darkness
    lantern.show();
    delay(speed);
  }
  delay(500); // Hold darkness for a moment
  lantern.clear();
  lantern.show();
}

void iceStormEffect(int speed) {
  // Randomly flashes blue/white, like an ice storm
  lantern.clear();
  for (int i = 0; i < random(1, NUM_PIXELS); i++) {
    lantern.setPixelColor(random(NUM_PIXELS), lantern.Color(0, 150, 255));
  }
  lantern.show();
  delay(speed);

  lantern.clear();
  lantern.show();
  delay(random(100, 400)); // Random gap
}

void graveyardGlowEffect(int speed) {
  // Dim green flicker, like glowing graveyard fog
  for (int i = 0; i < NUM_PIXELS; i++) {
    int flicker = random(80, 150);  // Dim green
    lantern.setPixelColor(i, lantern.Color(0, flicker, 0));
  }
  lantern.show();
  delay(speed);
}

void candleDripEffect(int red, int green, int blue, int speed) {
  // Lights each LED in chosen color, one after another, then turns them off
  lantern.clear();  // Start with all off

  for (int i = 0; i < NUM_PIXELS; i++) {
    lantern.setPixelColor(i, lantern.Color(red, green, blue));
    lantern.show();
    delay(speed);  // Wait between drips
  }

  delay(500);  // Let it "drip" linger
  lantern.clear();
  lantern.show();
}

void lanternGlowEffect(int speed) {
    static int brightness = 100;
    static int direction = 5;

    brightness += direction;
    if (brightness >= 200 || brightness <= 50) direction *= -1;

    for (int i = 0; i < NUM_PIXELS; i++) {
        lantern.setPixelColor(i, lantern.Color(
            (brightness * 255) / 200,
            (brightness * 150) / 200,
            0
        ));
    }

    lantern.show();
    delay(speed);
}
