#include <SPI.h>
#include <XPT2046_Touchscreen.h>
#include <TFT_eSPI.h>

#define XPT2046_IRQ 36
#define XPT2046_MOSI 32
#define XPT2046_MISO 39
#define XPT2046_CLK 25
#define XPT2046_CS 33

SPIClass mySpi = SPIClass(VSPI);
XPT2046_Touchscreen ts(XPT2046_CS, XPT2046_IRQ);

TFT_eSPI tft = TFT_eSPI();

// ** Menu Options (Removed SD Card Files) **
const char* mainMenu[] = {"Bluetooth Menu", "Show Menu", "WiFi Menu", "Settings", "Diagnostics"};
const int menuLength = sizeof(mainMenu) / sizeof(mainMenu[0]);  // **Updated menu length**
int selectedMenu = -1;  

// ** Spacing Adjustments **
int menuSpacing = 30;  
int firstMenuY = 50;   
int backButtonY = 190;  
bool inSubMenu = false;  

// ** Global Variables for States **
bool bluetoothEnabled = false;
int brightnessLevel = 128;  // Default brightness (0-255)








// ** Draw Centered Text **
void drawCenteredText(const char* text, int y, int textSize = 2) {
    int charWidth = 6;
    int textWidth = strlen(text) * charWidth * textSize;
    int x = (tft.width() - textWidth) / 2;

    tft.setTextSize(textSize);
    tft.setCursor(x, y);
    tft.print(text);
}
// ** Loading Screen with SHOWDUINO Title & Version **
void showLoadingScreen() {
    tft.fillScreen(TFT_BLACK);

    tft.setTextColor(TFT_WHITE);
    tft.setTextSize(3);
    drawCenteredText("SHOWDUINO", 40, 3);

    tft.setTextSize(2);
    drawCenteredText("SYSTEM v1.0", 70, 2);

    for (int progress = 0; progress <= 100; progress += 10) {
        showLoadingProgress(progress);
        delay(300);
    }
}
// ** Progress Bar Function (Fixed Percentage Display) **
void showLoadingProgress(int progress) {
    int barX = 30;
    int barY = 120;
    int barWidth = tft.width() - 60;
    int barHeight = 8;

    static bool outlineDrawn = false;
    if (!outlineDrawn) {
        tft.drawRect(barX, barY, barWidth, barHeight, TFT_WHITE);
        outlineDrawn = true;
    }

    // **Clear previous progress bar fill**
    tft.fillRect(barX + 1, barY + 1, barWidth - 2, barHeight - 2, TFT_BLACK);

    // **Fill new progress bar dynamically**
    tft.fillRect(barX + 1, barY + 1, (progress * barWidth) / 100, barHeight - 2, TFT_GREEN);

    // **Clear previous percentage text**
    tft.fillRect(0, 145, tft.width(), 20, TFT_BLACK);

    // **Print new percentage text centered**
    drawCenteredText((String(progress) + "%").c_str(), 145, 2);
}
// ** Draw Main Menu with Bluetooth Indicator **
void drawMenu() {
    inSubMenu = false;
    tft.fillScreen(TFT_BLACK);

    drawCenteredText("Main Menu", 10, 2);

    // ** Bluetooth Indicator at Top Right **
    tft.setTextSize(2);
    tft.setTextColor(bluetoothEnabled ? TFT_GREEN : TFT_RED, TFT_BLACK);
    tft.setCursor(tft.width() - 100, 10);  // **Position at top right**
    tft.print(bluetoothEnabled ? "BT: ON" : "BT: OFF");

    // ** Menu Options **
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.setTextSize(2);
    
    for (int i = 0; i < menuLength; i++) {
        int yPosition = firstMenuY + (i * menuSpacing);
        drawCenteredText(mainMenu[i], yPosition, 2);
    }
}


















void setup() {
    Serial.begin(115200);

    mySpi.begin(XPT2046_CLK, XPT2046_MISO, XPT2046_MOSI, XPT2046_CS);
    ts.begin(mySpi);
    ts.setRotation(3);  
    tft.init();
    tft.setRotation(3);
    
    showLoadingScreen();
    drawMenu();
}














void loop() {
    if (ts.tirqTouched() && ts.touched()) {
        TS_Point p = ts.getPoint();
        int touchX = map(p.x, 0, 4095, 0, tft.width());
        int touchY = map(p.y, 0, 4095, 0, tft.height());

        if (!inSubMenu) {
            if (touchY >= firstMenuY && touchY <= firstMenuY + (menuLength * menuSpacing)) {
                int touchedItem = floor((touchY - firstMenuY) / (float)menuSpacing);
                touchedItem = constrain(touchedItem, 0, menuLength - 1);
                selectedMenu = touchedItem;
                handleMenuSelection(selectedMenu);
            }
        }

        if (inSubMenu && touchY >= backButtonY - 10 && touchY <= backButtonY + menuSpacing) {
            drawMenu();
        }

        delay(100);
    }
}






















// ** Handle Menu Selection **
void handleMenuSelection(int selectedMenu) {
    inSubMenu = true;
    switch (selectedMenu) {
        case 0:
            bluetoothMenu();
            break;
        case 1:
            showMenu();
            break;
        case 2:
            wifiMenu();
            break;
        case 3:
            settingsMenu();
            break;
        case 4:
            diagnosticsMenu();
            break;
        default:
            break;
    }
}
// ** Enable/Disable Bluetooth **
void toggleBluetooth(bool state) {
    if (state) {
        SerialBT.begin("Showduino");  // **Start Bluetooth**
    } else {
        SerialBT.end();  // **Turn Off Bluetooth**
    }
}

// ** Bluetooth Menu - Now Controls Bluetooth Hardware **
void bluetoothMenu() {
    tft.fillScreen(TFT_BLACK);
    drawCenteredText("Bluetooth Menu", 30, 2);
    
    // Display Bluetooth status
    String btStatus = bluetoothEnabled ? "Bluetooth: ON" : "Bluetooth: OFF";
    drawCenteredText(btStatus.c_str(), 80, 2);
    
    drawCenteredText("Tap to Toggle", 120, 2);
    drawBackButton();

    // Wait for touch to toggle Bluetooth
    while (true) {
        if (ts.tirqTouched() && ts.touched()) {
            TS_Point p = ts.getPoint();
            int touchY = map(p.y, 0, 4095, 0, tft.height());

            if (touchY >= 80 && touchY <= 140) { // **Tap to Toggle Bluetooth**
                bluetoothEnabled = !bluetoothEnabled;
                toggleBluetooth(bluetoothEnabled); // **Turn Bluetooth ON/OFF**
                drawMenu();  // **Update Main Menu Indicator**
                bluetoothMenu(); // **Refresh Screen**
                return;
            } 
            if (touchY >= backButtonY - 10 && touchY <= backButtonY + 30) { // **Back Button**
                drawMenu();
                return;
            }
        }
        delay(100);
    }
}

void showMenu() {
    tft.fillScreen(TFT_BLACK);
    drawCenteredText("Show Menu", 30, 2);
    drawBackButton();
}

// ** WiFi Menu - Display Status **
void wifiMenu() {
    tft.fillScreen(TFT_BLACK);
    drawCenteredText("WiFi Menu", 30, 2);
    
    drawCenteredText("WiFi Status: Not Connected", 80, 2);
    drawCenteredText("Feature Coming Soon", 120, 2);
    drawBackButton();
    
    while (true) {
        if (ts.tirqTouched() && ts.touched()) {
            TS_Point p = ts.getPoint();
            int touchY = map(p.y, 0, 4095, 0, tft.height());
            
            if (touchY >= backButtonY - 10 && touchY <= backButtonY + 30) { // **Back Button**
                drawMenu();
                return;
            }
        }
        delay(100);
    }
}

// ** Settings Menu - Adjust Brightness **
void settingsMenu() {
    tft.fillScreen(TFT_BLACK);
    drawCenteredText("Settings Menu", 30, 2);

    drawCenteredText("Brightness Level", 80, 2);
    drawCenteredText("Tap to Adjust", 120, 2);
    drawBackButton();
    
    while (true) {
        if (ts.tirqTouched() && ts.touched()) {
            TS_Point p = ts.getPoint();
            int touchY = map(p.y, 0, 4095, 0, tft.height());

            if (touchY >= 80 && touchY <= 140) { // **Adjust Brightness**
                brightnessLevel += 50;
                if (brightnessLevel > 255) brightnessLevel = 50; // **Loop Brightness**
                analogWrite(TFT_BL, brightnessLevel); // **Adjust Brightness**
                settingsMenu(); // **Refresh Screen**
                return;
            } 
            if (touchY >= backButtonY - 10 && touchY <= backButtonY + 30) { // **Back Button**
                drawMenu();
                return;
            }
        }
        delay(100);
    }
}
void diagnosticsMenu() {
    tft.fillScreen(TFT_BLACK);
    drawCenteredText("Diagnostics Menu", 30, 2);
    drawBackButton();
}

// ** Draw Back Button (Centered) **
void drawBackButton() {
    drawCenteredText("Back", backButtonY, 2);
}
