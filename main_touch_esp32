#include <SPI.h>
#include <XPT2046_Touchscreen.h>
#include <TFT_eSPI.h>
#include <SD.h>
#include "FS.h"
#include <IRremote.h>
#include <Adafruit_NeoPixel.h>
#include <WiFi.h>


#define IR_RECEIVER_PIN 22  // IR sensor connected to digital pin 2
#define NEOPIXEL_PIN 27     // NeoPixel data pin
#define NUM_IND 24          // Number of NeoPixels

Adafruit_NeoPixel WORK_IND(NUM_IND, NEOPIXEL_PIN, NEO_GRB + NEO_KHZ800);



// ----------------------------
// SD Reader pins (default VSPI pins)
// ----------------------------
#define SD_SCK 18
#define SD_MISO 19
#define SD_MOSI 23
#define SD_CS 5

// ----------------------------
#define XPT2046_IRQ 36
#define XPT2046_MOSI 32
#define XPT2046_MISO 39
#define XPT2046_CLK 25
#define XPT2046_CS 33

#define DEBOUNCE_DELAY 100

unsigned long lastTouchTime = 0;
unsigned long lastRTCUpdate = 0;

String rtcTime = "--:--";
String previousTime = "";  // ✔️ Fixed: removed static
String lastKnownRTC = "00:00:00";

#define RX_PIN 3
#define TX_PIN 1

String incomingData;

#define GREEN_LED 16  // Turns ON at startup for confirmation
#define BLUE_LED 17   // Blinks ON when touched
#define RED_LED 4     // Blinks ON when touched

#define ESP32_MAIN Serial1  // For talking to serial ESP32 MAIN
#define DEBUG Serial        // For serial monitor/PC debugging

SPIClass mySpi = SPIClass(VSPI);
XPT2046_Touchscreen ts(XPT2046_CS, XPT2046_IRQ);
TFT_eSPI tft = TFT_eSPI();

const char *mainMenu[] = { "Show Menu", "Settings", "Diagnostics" };
const int menuLength = sizeof(mainMenu) / sizeof(mainMenu[0]);
int selectedMenu = -1;



String wifiSSID = "";      // WiFi SSID entered via IR keyboard
String wifiPassword = "";  // WiFi password entered via IR keyboard


// Add "WiFi Configuration" to the Settings Menu
const char *settingsMenuOptions[] = { "Brightness Control", "WiFi Configuration" };
const int settingsMenuLength = sizeof(settingsMenuOptions) / sizeof(settingsMenuOptions[0]);




int menuSpacing = 30;
int firstMenuY = 50;
int backButtonY = 200;
bool inSubMenu = false;



const byte buttonCode[44] = {
  0x5C, 0x5D, 0x41, 0x40,
  0x58, 0x59, 0x45, 0x44,
  0x54, 0x55, 0x49, 0x48,
  0x50, 0x51, 0x4D, 0x4C,
  0x1C, 0x1D, 0x1E, 0x1F,
  0x18, 0x19, 0x1A, 0x1B,
  0x14, 0x15, 0x16, 0x17,
  0x10, 0x11, 0x12, 0x13,
  0xC, 0xD, 0xE, 0xF,
  0x8, 0x9, 0xA, 0xB,
  0x4, 0x5, 0x6, 0x7
};

const byte ASCIIcode[44] = {
  0x31, 0x32, 0x33, 0x34,
  0x35, 0x36, 0x37, 0x38,
  0x39, 0x30, 0x2A, 0x23,
  0x41, 0x42, 0x43, 0x44,
  0x45, 0x46, 0x47, 0x48,
  0x49, 0x4A, 0x4B, 0x4C,
  0x4D, 0x4E, 0x4F, 0x50,
  0x51, 0x52, 0x53, 0x54,
  0x55, 0x56, 0x57, 0x58,
  0x59, 0x5A, 0xFA, 0xFB,
  0xFC, 0xFD, 0xFE, 0xFF
};

#define SHIFT_KEY 0xA1  // Example Shift key code
#define ENTER_KEY 0xA2  // Example Enter key code
#define UP_ARROW 0xA3
#define DOWN_ARROW 0xA4
#define LEFT_ARROW 0xA5
#define RIGHT_ARROW 0xA6

IRrecv irrecv(IR_RECEIVER_PIN);
decode_results results;

bool shiftActive = false;

// Track Bluetooth State
bool bluetoothEnabled = false;
#define DEBOUNCE_DELAY 300

// ** Brightness Stages (1-5) **
int brightnessLevel = 3;  // Default brightness stage (1-5)
// ** Map Stage Values to Actual Brightness Values **
int brightnessValues[5] = { 50, 100, 150, 200, 255 };




unsigned long lastInteractionTime = 0;
bool screensaverActive = false;
const unsigned long SCREENSAVER_TIMEOUT = 120000;  // 2 minutes

// Logo dimensions and position
const int logoWidth = 150;
const int logoHeight = 60;
int logoX = 320;  // Start offscreen right
int logoY = 80;

// Mega RTC time string received via Serial
extern String lastKnownRTC;  // This should be updated from displayTimeOnTouchscreen()






















// ** Function Declarations **
void drawMenu();
void drawCenteredText(const char *text, int y, int textSize = 2);
void drawBackButton();
void displayTimeOnTouchscreen(String timestamp);




/* ---------------------------- show menu for starting -----------------------------------*/
void showMenu() {
  inSubMenu = true;
  tft.fillScreen(TFT_BLACK);
  drawCenteredText("Show Menu", 30, 2);
  drawCenteredText("Feature Coming Soon", 180, 2);
  drawBackButton();
}





void settingsMenu();
void diagnosticsMenu();
void showLoadingScreen();
void handleMenuSelection(int selectedMenu);
void displaySystemStatus();
void requestRelayStatus();
void requestNeoPixelStatus();
void requestVoltageTemp();
void viewLogFile();
void brightnessMenu();  // Declare it
void logMessage(const String &message);









/* ---------------------------- menu design -----------------------------------*/





// ** Draw Centered Text **
void drawCenteredText(const char *text, int y, int textSize) {
  int charWidth = 6;
  int textWidth = strlen(text) * charWidth * textSize;
  int x = (tft.width() - textWidth) / 2;

  tft.setTextSize(textSize);
  tft.setCursor(x, y);
  tft.print(text);
}




/* ---------------------------- time conf -----------------------------------*/

// ** Display Time on Touchscreen **
void displayTimeOnTouchscreen(String timestamp) {
  if (ESP32_MAIN.available()) {
    String receivedData = ESP32_MAIN.readStringUntil('\n');
    receivedData.trim();

    if (receivedData.startsWith("TIME:")) {
      rtcTime = receivedData.substring(5);  // Extract time from data
    }
  }

  if (rtcTime != previousTime) {  // Only update if the time has changed
    tft.setTextSize(2);
    tft.setTextColor(TFT_WHITE, TFT_BLACK);  // White text, black background
    tft.setCursor(5, 5);                     // Top-left position (x=5, y=5)
    tft.fillRect(5, 5, 100, 20, TFT_BLACK);  // Clear previous time digits only
    tft.print(rtcTime);                      // Display the RTC time
    previousTime = rtcTime;                  // Update the previous time
  }
}










/* ---------------------------- loading/starting/SCREENSAVER -----------------------------------*/







// ** Show Loading Screen **
void showLoadingScreen() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE);
  tft.setTextSize(3);
  drawCenteredText("SHOWDUINO", 40, 3);

  tft.setTextSize(2);
  drawCenteredText("SYSTEM v1.0", 70, 2);

  for (int progress = 0; progress <= 100; progress += 10) {
    delay(500);
  }
}
void handleIRInput(uint16_t command) {
  for (int i = 0; i < 44; i++) {
    if (command == buttonCode[i]) {
      Serial.print("Key Pressed: ");
      Serial.write(ASCIIcode[i]);
      Serial.println();
      showFeedback(true);
      return;
    }
  }

  if (command == SHIFT_KEY) {
    shiftActive = !shiftActive;
    Serial.println(shiftActive ? "Shift Activated" : "Shift Deactivated");
    showFeedback(true);
  } else if (command == ENTER_KEY) {
    Serial.println("Enter Key Pressed");
    showFeedback(true);
  } else if (command == UP_ARROW) {
    Serial.println("Arrow Up");
    showFeedback(true);
  } else if (command == DOWN_ARROW) {
    Serial.println("Arrow Down");
    showFeedback(true);
  } else if (command == LEFT_ARROW) {
    Serial.println("Arrow Left");
    showFeedback(true);
  } else if (command == RIGHT_ARROW) {
    Serial.println("Arrow Right");
    showFeedback(true);
  } else {
    Serial.println("Unrecognized Command");
    showFeedback(false);
  }
}
void showFeedback(bool success) {
  WORK_IND.clear();
  if (success) {
    for (int i = 0; i < NUM_IND; i++) {
      WORK_IND.setPixelColor(i, WORK_IND.Color(0, 255, 0));  // Green for recognized input
    }
  } else {
    for (int i = 0; i < NUM_IND; i++) {
      WORK_IND.setPixelColor(i, WORK_IND.Color(255, 0, 0));  // Red for unrecognized input
    }
  }
  WORK_IND.show();
  delay(300);
  WORK_IND.clear();
  WORK_IND.show();
}


void drawBmp(const char *filename, int16_t x, int16_t y) {
  File bmpFile = SD.open(filename);
  if (!bmpFile) return;

  if (read16(bmpFile) == 0x4D42) {
    (void)read32(bmpFile);  // Skip size
    (void)read32(bmpFile);  // Skip reserved
    uint32_t imageOffset = read32(bmpFile);
    (void)read32(bmpFile);  // Header size
    int bmpWidth = read32(bmpFile);
    int bmpHeight = read32(bmpFile);
    if (read16(bmpFile) == 1 && read16(bmpFile) == 24 && read32(bmpFile) == 0) {
      bmpFile.seek(imageOffset);
      uint8_t r, g, b;
      for (int row = bmpHeight - 1; row >= 0; row--) {
        for (int col = 0; col < bmpWidth; col++) {
          b = bmpFile.read();
          g = bmpFile.read();
          r = bmpFile.read();
          tft.drawPixel(x + col, y + row, tft.color565(r, g, b));
        }
        bmpFile.read();
        bmpFile.read();
        bmpFile.read();  // padding
      }
    }
  }
  bmpFile.close();
}

uint16_t read16(File &f) {
  uint16_t result;
  result = f.read();
  result |= (f.read() << 8);
  return result;
}

uint32_t read32(File &f) {
  uint32_t result;
  result = f.read();
  result |= (f.read() << 8);
  result |= (f.read() << 16);
  result |= (f.read() << 24);
  return result;
}




void checkInactivity() {
  if (screensaverActive) return;  // Already active

  if (millis() - lastInteractionTime > SCREENSAVER_TIMEOUT) {
    startScreensaver();
  }
}

void registerInteraction() {
  lastInteractionTime = millis();
  if (screensaverActive) exitScreensaver();
}

void startScreensaver() {
  screensaverActive = true;
  tft.fillScreen(TFT_BLACK);
  logoX = tft.width();  // Start scrolling from right
}

void exitScreensaver() {
  screensaverActive = false;
  drawMenu();  // Redraw your main menu (defined elsewhere)
}

void updateScreensaver() {
  if (!screensaverActive) return;

  tft.fillRect(0, logoY, tft.width(), logoHeight, TFT_BLACK);  // Clear previous

  // Simulate scrolling by redrawing logo at new X
  drawBmp("/showduino.bmp", logoX, logoY);  // You'll need a drawBmp() helper or convert to array

  drawClockOverlay();

  logoX -= 2;  // Move left
  if (logoX < -logoWidth) logoX = tft.width();

  delay(50);
}

void drawClockOverlay() {
  tft.setTextSize(2);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setCursor(100, 200);
  tft.print(lastKnownRTC);  // Uses time received from Mega
}

/* ----------------------------  menu -----------------------------------*/




void drawMenu() {
  inSubMenu = false;
  tft.fillScreen(TFT_BLACK);
  tft.fillRect(0, 10, tft.width(), 20, TFT_BLACK);  // Clear old text artifacts
  drawCenteredText("Main Menu", 10, 2);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(2);

  for (int i = 0; i < menuLength; i++) {
    int yPosition = firstMenuY + (i * menuSpacing);
    drawCenteredText(mainMenu[i], yPosition, 2);
  }
}

// ** Settings Menu **
void settingsMenu() {
  inSubMenu = true;
  delay(600);  // Added delay to prevent instant menu selection
  tft.fillScreen(TFT_BLACK);
  drawCenteredText("Settings Menu", 30, 2);

  for (int i = 0; i < settingsMenuLength; i++) {
    int yPosition = firstMenuY + (i * menuSpacing);
    drawCenteredText(settingsMenuOptions[i], yPosition, 2);
  }

  drawBackButton();

  while (true) {
    if (ts.tirqTouched() && ts.touched()) {
      TS_Point p = ts.getPoint();
      int touchY = map(p.y, 0, 4095, 0, tft.height());

      if (touchY >= firstMenuY && touchY <= firstMenuY + (settingsMenuLength * menuSpacing)) {
        int touchedItem = (touchY - firstMenuY) / menuSpacing;
        switch (touchedItem) {
          case 0:
            brightnessMenu();
            return;
          case 1:
            wifiConfigMenu();
            return;
          default:
            break;
        }
      }

      if (touchY >= backButtonY - 20 && touchY <= backButtonY + 30) {
        drawMenu();
        inSubMenu = false;
        delay(200);  // Debounce
        return;
      }
    }
    delay(100);
  }
}



/* ---------------------------- wifi conf -----------------------------------*/
void wifiScanMenu() {
  inSubMenu = true;
  int selectedNetwork = -1;
  int currentIndex = 0;
  const int maxPerPage = 5;
  const int backY = tft.height() - 30;
  const int touchMargin = 10;

  int numNetworks = WiFi.scanNetworks();
  if (numNetworks == 0) {
    tft.fillScreen(TFT_BLACK);
    drawCenteredText("No Networks Found", 80, 2);
    delay(2000);
    settingsMenu();
    return;
  }

  while (true) {
    tft.fillScreen(TFT_BLACK);
    drawCenteredText("WiFi Networks", 10, 2);

    int visibleItems = min(maxPerPage, numNetworks - currentIndex);

    for (int i = 0; i < visibleItems; i++) {
      int netIndex = currentIndex + i;
      int yPosition = firstMenuY + (i * menuSpacing);

      String ssid = WiFi.SSID(netIndex);
      if (ssid.length() > 18) ssid = ssid.substring(0, 17) + "...";

      if (WiFi.SSID() == WiFi.SSID(netIndex)) {
        ssid = "> " + ssid;
        tft.setTextColor(TFT_CYAN, TFT_BLACK);
      } else {
        tft.setTextColor(TFT_WHITE, TFT_BLACK);
      }

      drawCenteredText(ssid.c_str(), yPosition, 2);

      int iconX = tft.width() - 50;
      int iconY = yPosition + 5;
      drawSignalStrengthIcon(iconX, iconY, WiFi.RSSI(netIndex));
    }

    // Scroll indicators
    if (currentIndex > 0)
      drawCenteredText("^", backY - 80, 2);
    if (currentIndex + visibleItems < numNetworks)
      drawCenteredText("v", backY - 20, 2);

    // Back button
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    drawCenteredText("Back", backY, 2);

    if (ts.tirqTouched() && ts.touched()) {
      unsigned long pressStart = millis();
      TS_Point p = ts.getPoint();
      int x = map(p.x, 0, 4095, 0, tft.width());
      int y = map(p.y, 0, 4095, 0, tft.height());

      while (ts.tirqTouched() && ts.touched()) delay(10);
      unsigned long pressDuration = millis() - pressStart;

      // Check WiFi items
      for (int i = 0; i < visibleItems; i++) {
        int yItem = firstMenuY + (i * menuSpacing);
        if (y >= yItem && y <= yItem + menuSpacing) {
          int netIdx = currentIndex + i;
          wifiSSID = WiFi.SSID(netIdx).c_str();

          if (pressDuration > 800) {
            forgetNetworkPrompt(wifiSSID);
          } else {
            wifiConfigMenu();
          }
          return;
        }
      }

      // Back button zone
      if (y >= backY - touchMargin && y <= backY + menuSpacing) {
        drawMenu();
        return;
      }

      // Scroll down
      if (y > backY + 30 && currentIndex + visibleItems < numNetworks) {
        currentIndex++;
      }

      // Scroll up
      if (y < 30 && currentIndex > 0) {
        currentIndex--;
      }
    }

    delay(100);
  }
}



void connectToWiFi(const char *ssid = nullptr) {
  if (ssid != nullptr) {
    wifiSSID = String(ssid);
  }

  tft.fillScreen(TFT_BLACK);
  drawCenteredText(("Connecting to " + wifiSSID + "...").c_str(), 80, 2);

  WiFi.begin(wifiSSID.c_str(), wifiPassword.c_str());

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000) {
    delay(500);
  }

  if (WiFi.status() == WL_CONNECTED) {
    drawCenteredText("Connected Successfully!", 120, 2);
    saveWiFiCredentials(wifiSSID, wifiPassword);
  } else {
    drawCenteredText("Connection Failed!", 120, 2);
  }

  delay(2000);
  settingsMenu();
}

// WiFi Scan Function
void scanWiFiNetworks() {
  tft.fillScreen(TFT_BLACK);
  drawCenteredText("Scanning for Networks...", 30, 2);
  int numNetworks = WiFi.scanNetworks();

  if (numNetworks == 0) {
    drawCenteredText("No Networks Found", 80, 2);
    delay(2000);
    settingsMenu();
    return;
  }

  for (int i = 0; i < numNetworks; i++) {
    drawCenteredText(WiFi.SSID(i).c_str(), 80 + (i * 20), 2);
  }

  drawBackButton();
}
void wifiConfigMenu() {
  inSubMenu = true;
  wifiPassword = "";

  tft.fillScreen(TFT_BLACK);
  drawCenteredText(("SSID: " + wifiSSID).c_str(), 50, 2);
  drawCenteredText("Enter Password:", 80, 2);
  drawBackButton();

  while (true) {
    if (irrecv.decode(&results)) {
      if (results.value == ENTER_KEY) {
        connectToWiFi();  // Use globally set wifiSSID
        return;
      } else {
        char character = mapIRCodeToCharacter(results.value);
        if (character != 0) {
          wifiPassword += character;
          tft.fillRect(0, 100, tft.width(), 20, TFT_BLACK);
          drawCenteredText(wifiPassword.c_str(), 100, 2);
        }
      }
      irrecv.resume();
    }

    if (ts.tirqTouched() && ts.touched()) {
      TS_Point p = ts.getPoint();
      int touchY = map(p.y, 0, 4095, 0, tft.height());

      if (touchY >= backButtonY - 20 && touchY <= backButtonY + 30) {
        wifiScanMenu();
        return;
      }
    }

    delay(100);
  }
}

void saveWiFiCredentials(const String &ssid, const String &password) {
  File file = SD.open("/wifi.txt", FILE_WRITE);
  if (!file) {
    logMessage("ERROR: Unable to save WiFi credentials");
    return;
  }
  file.println(ssid);
  file.println(password);
  file.close();
  logMessage("INFO: WiFi credentials saved");
}


void forgetNetworkPrompt(const String &ssidToForget) {
  tft.fillScreen(TFT_BLACK);
  drawCenteredText(("Forget \"" + ssidToForget + "\"?").c_str(), 60, 2);
  drawCenteredText("This will remove saved credentials.", 90, 2);

  int buttonY = 150;
  int buttonHeight = 30;
  int buttonWidth = 80;

  tft.fillRect(60, buttonY, buttonWidth, buttonHeight, TFT_RED);
  tft.setTextColor(TFT_WHITE);
  drawCenteredText("Yes", buttonY + 5, 2);

  tft.fillRect(tft.width() - 60 - buttonWidth, buttonY, buttonWidth, buttonHeight, TFT_DARKGREY);
  drawCenteredText("No", buttonY + 5, 2);

  while (true) {
    if (ts.tirqTouched() && ts.touched()) {
      TS_Point p = ts.getPoint();
      int x = map(p.x, 0, 4095, 0, tft.width());
      int y = map(p.y, 0, 4095, 0, tft.height());

      if (y >= buttonY && y <= buttonY + buttonHeight) {
        if (x >= 60 && x <= 60 + buttonWidth) {
          deleteSavedWiFi();
          drawCenteredText("Network Forgotten", 200, 2);
          delay(2000);
          settingsMenu();
          return;
        }

        if (x >= tft.width() - 60 - buttonWidth && x <= tft.width() - 60) {
          wifiScanMenu();
          return;
        }
      }

      if (y >= backButtonY - 20 && y <= backButtonY + 30) {
        settingsMenu();
        return;
      }
    }

    delay(50);
  }
}


void deleteSavedWiFi() {
  if (SD.exists("/wifi.txt")) {
    SD.remove("/wifi.txt");
    logMessage("INFO: Saved WiFi credentials deleted");
  }
}

void drawSignalStrengthIcon(int x, int y, int rssi) {
  int bars = 0;
  if (rssi > -50) bars = 4;
  else if (rssi > -60) bars = 3;
  else if (rssi > -70) bars = 2;
  else if (rssi > -80) bars = 1;

  int barWidth = 4;
  int spacing = 2;
  int maxHeight = 16;

  for (int i = 0; i < 4; i++) {
    int height = (i + 1) * (maxHeight / 4);
    int barX = x + i * (barWidth + spacing);
    int barY = y + maxHeight - height;

    if (i < bars) {
      tft.fillRect(barX, barY, barWidth, height, TFT_GREEN);
    } else {
      tft.drawRect(barX, barY, barWidth, height, TFT_DARKGREY);
    }
  }
}





/* ----------------------------  menus    /  sub menus  -----------------------------------*/





// ** Brightness Control Submenu **
void brightnessMenu() {
  inSubMenu = true;
  tft.fillScreen(TFT_BLACK);
  drawCenteredText("Brightness Control", 30, 2);

  drawCenteredText(("Current: Stage " + String(brightnessLevel)).c_str(), 100, 2);
  drawCenteredText("Tap here to change", 140, 2);
  drawBackButton();

  while (true) {
    if (ts.tirqTouched() && ts.touched()) {
      TS_Point p = ts.getPoint();
      int touchY = map(p.y, 0, 4095, 0, tft.height());

      if (touchY >= 140 && touchY <= 180) {
        brightnessLevel++;
        if (brightnessLevel > 5) brightnessLevel = 1;  // Loop back to Stage 1

        analogWrite(TFT_BL, brightnessValues[brightnessLevel - 1]);

        tft.fillRect(0, 100, tft.width(), 20, TFT_BLACK);  // Clear old brightness text
        drawCenteredText(("Current: Stage " + String(brightnessLevel)).c_str(), 100, 2);
      }

      if (touchY >= backButtonY - 20 && touchY <= backButtonY + 30) {
        settingsMenu();
        return;
      }
    }
    delay(100);
  }
}



/* ---------------------------- diagnostics menu  -----------------------------------*/



int diagnosticsSelection = 0;  // Tracks submenu selection



// === Individual Diagnostic Functions === //


void displaySystemStatus() {
  logMessage("=== SYSTEM STATUS ===");
  logMessage("RTC Time: " + (rtcTime.isEmpty() ? "ERROR - No time data received" : rtcTime));

  if (!SD.begin(SS)) {
    logMessage("SD Card: ERROR - Mount Failed");
  } else {
    uint64_t totalSpace = SD.totalBytes() / (1024 * 1024);
    uint64_t usedSpace = SD.usedBytes() / (1024 * 1024);
    logMessage("SD Card: OK - " + String(usedSpace) + "MB used of " + String(totalSpace) + "MB");
  }

  logMessage("=== SYSTEM STATUS COMPLETE ===");
}

void requestRelayStatus() {
  ESP32_MAIN.println("RELAY_CHECK");
  delay(100);
  if (ESP32_MAIN.available()) {
    String relayStatus = ESP32_MAIN.readStringUntil('\n');
    logMessage("Relays: " + relayStatus);
  } else {
    logMessage("Relays: ERROR - No response from Mega");
  }
}

void requestNeoPixelStatus() {
  ESP32_MAIN.println("NEO_CHECK");
  delay(100);
  if (ESP32_MAIN.available()) {
    String neoStatus = ESP32_MAIN.readStringUntil('\n');
    logMessage("NeoPixel: " + neoStatus);
  } else {
    logMessage("NeoPixel: ERROR - No response from Mega");
  }
}

void requestVoltageTemp() {
  ESP32_MAIN.println("VOLTAGE_CHECK");
  delay(100);
  if (ESP32_MAIN.available()) {
    String voltageStatus = ESP32_MAIN.readStringUntil('\n');
    logMessage("Voltage/Temp: " + voltageStatus);
  } else {
    logMessage("Voltage/Temp: ERROR - No response from Mega");
  }
}

void viewLogFile() {
  File logFile = SD.open("/log.txt");
  if (!logFile) {
    logMessage("Log Viewer: ERROR - Log file not found");
    return;
  }

  logMessage("=== LOG FILE CONTENT ===");
  while (logFile.available()) {
    String logEntry = logFile.readStringUntil('\n');
    logMessage(logEntry);
  }
  logMessage("=== END OF LOG FILE ===");

  logFile.close();
}

void diagnosticsMenu() {
  inSubMenu = true;
  tft.fillScreen(TFT_BLACK);
  tft.setTextSize(2);
  tft.setTextColor(TFT_WHITE);
  tft.setCursor(10, 10);

  drawCenteredText("Diagnostics Menu", 10, 2);
  drawCenteredText("1. System Status", 40, 2);
  drawCenteredText("2. Relay Check", 60, 2);
  drawCenteredText("3. NeoPixel Test", 80, 2);
  drawCenteredText("4. Voltage/Temp Readings", 100, 2);
  drawCenteredText("5. View Log File", 120, 2);
  drawBackButton();

  while (true) {
    // Serial input
    if (ESP32_MAIN.available()) {
      String receivedData = ESP32_MAIN.readStringUntil('\n');
      receivedData.trim();

      if (receivedData == "1") {
        displaySystemStatus();
      } else if (receivedData == "2") {
        requestRelayStatus();
      } else if (receivedData == "3") {
        requestNeoPixelStatus();
      } else if (receivedData == "4") {
        requestVoltageTemp();
      } else if (receivedData == "5") {
        viewLogFile();
      } else if (receivedData == "6") {
        return;  // Exit diagnostics
      }
    }

    // Touch input for back button
    if (ts.tirqTouched() && ts.touched()) {
      TS_Point p = ts.getPoint();
      int touchY = map(p.y, 0, 4095, 0, tft.height());

      if (touchY >= backButtonY - 20 && touchY <= backButtonY + 30) {
        drawMenu();  // Go back to main menu
        inSubMenu = false;
        delay(300);  // debounce
        return;
      }
    }

    delay(50);
  }
}








/* ----------------------------  menus    /  sub menu selection -----------------------------------*/








void handleMenuSelection(int selection) {
  switch (selection) {
    case 0:
      showMenu();  // "Show Menu"
      break;
    case 1:
      settingsMenu();  // "Settings"
      break;
    case 2:
      diagnosticsMenu();  // "Diagnostics"
      break;
    default:
      logMessage("Invalid menu option selected.");
  }
}

void drawBackButton() {
  drawCenteredText("Back", backButtonY, 2);
}

bool checkBackButtonTouched() {
  if (ts.tirqTouched() && ts.touched()) {
    TS_Point p = ts.getPoint();
    int touchY = map(p.y, 0, 4095, 0, tft.height());
    return (touchY >= backButtonY - 20 && touchY <= backButtonY + 30);
  }
  return false;
}

// Map IR codes to characters for password entry
char mapIRCodeToCharacter(uint16_t command) {
  for (int i = 0; i < 44; i++) {
    if (command == buttonCode[i]) {
      return ASCIIcode[i];
    }
  }
  return 0;  // Return 0 if no match
}







/* ----------------------------  sd card functions  //  NEVER EVER TOUCH THESE!! -----------------------------------*/










extern String rtcTime;  // Use rtcTime from your existing time system

void logMessage(const String &message) {
  String timestamp = rtcTime.isEmpty() ? "[UNKNOWN TIME]" : "[" + rtcTime + "]";

  String logEntry = timestamp + " " + message + "\n";

  // Log Rotation System
  File logFile = SD.open("/log.txt", FILE_APPEND);
  if (logFile && logFile.size() >= 1024 * 10) {  // Rotate log if > 10KB
    logFile.close();
    String archiveName = "/log_" + rtcTime + ".txt";
    SD.rename("/log.txt", archiveName.c_str());
  }

  appendFile(SD, "/log.txt", logEntry.c_str());
  Serial.print(logEntry);  // Optional: Also prints logs in Serial Monitor
}

void setupSDCard() {
  SPIClass spi = SPIClass(VSPI);

  if (!SD.begin(SS, spi, 80000000)) {
    logMessage("ERROR: Card Mount Failed");
    return;
  }

  uint8_t cardType = SD.cardType();

  if (cardType == CARD_NONE) {
    logMessage("ERROR: No SD card attached");
    return;
  }

  logMessage("INFO: SD card successfully mounted");

  logMessage("SD Card Type: " + String(cardType == CARD_MMC ? "MMC" : cardType == CARD_SD   ? "SDSC"
                                                                    : cardType == CARD_SDHC ? "SDHC"
                                                                                            : "UNKNOWN"));

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  logMessage("SD Card Size: " + String(cardSize) + "MB");

  // Example log entries for file operations
  logMessage("Creating directory '/mydir'");
  createDir(SD, "/mydir");

  logMessage("Writing to '/hello.txt'");
  writeFile(SD, "/hello.txt", "Hello ");

  logMessage("Appending to '/hello.txt'");
  appendFile(SD, "/hello.txt", "World!\n");

  logMessage("Renaming '/hello.txt' to '/foo.txt'");
  renameFile(SD, "/hello.txt", "/foo.txt");

  logMessage("Reading '/foo.txt'");
  readFile(SD, "/foo.txt");

  logMessage("File IO test on '/test.txt'");
  testFileIO(SD, "/test.txt");

  logMessage("Total space: " + String(SD.totalBytes() / (1024 * 1024)) + "MB");
  logMessage("Used space: " + String(SD.usedBytes() / (1024 * 1024)) + "MB");

  logMessage("INFO: SD card setup complete");
}

void listDir(fs::FS &fs, const char *dirname, uint8_t levels) {
  Serial.printf("Listing directory: %s\n", dirname);

  File root = fs.open(dirname);
  if (!root) {
    Serial.println("Failed to open directory");
    return;
  }
  if (!root.isDirectory()) {
    Serial.println("Not a directory");
    return;
  }

  File file = root.openNextFile();
  while (file) {
    if (file.isDirectory()) {
      Serial.print("  DIR : ");
      Serial.println(file.name());
      if (levels) {
        listDir(fs, file.path(), levels - 1);
      }
    } else {
      Serial.print("  FILE: ");
      Serial.print(file.name());
      Serial.print("  SIZE: ");
      Serial.println(file.size());
    }
    file = root.openNextFile();
  }
}

void createDir(fs::FS &fs, const char *path) {
  Serial.printf("Creating Dir: %s\n", path);
  if (fs.mkdir(path)) {
    Serial.println("Dir created");
  } else {
    Serial.println("mkdir failed");
  }
}

void removeDir(fs::FS &fs, const char *path) {
  Serial.printf("Removing Dir: %s\n", path);
  if (fs.rmdir(path)) {
    Serial.println("Dir removed");
  } else {
    Serial.println("rmdir failed");
  }
}

void readFile(fs::FS &fs, const char *path) {
  Serial.printf("Reading file: %s\n", path);

  File file = fs.open(path);
  if (!file) {
    Serial.println("Failed to open file for reading");
    return;
  }

  Serial.print("Read from file: ");
  while (file.available()) {
    Serial.write(file.read());
  }
  file.close();
}

void writeFile(fs::FS &fs, const char *path, const char *message) {
  Serial.printf("Writing file: %s\n", path);

  File file = fs.open(path, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  if (file.print(message)) {
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}

void appendFile(fs::FS &fs, const char *path, const char *message) {
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if (!file) {
    Serial.println("Failed to open file for appending");
    return;
  }
  if (file.print(message)) {
    Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
  }
  file.close();
}

void renameFile(fs::FS &fs, const char *path1, const char *path2) {
  Serial.printf("Renaming file %s to %s\n", path1, path2);
  if (fs.rename(path1, path2)) {
    Serial.println("File renamed");
  } else {
    Serial.println("Rename failed");
  }
}

void deleteFile(fs::FS &fs, const char *path) {
  Serial.printf("Deleting file: %s\n", path);
  if (fs.remove(path)) {
    Serial.println("File deleted");
  } else {
    Serial.println("Delete failed");
  }
}

void testFileIO(fs::FS &fs, const char *path) {
  File file = fs.open(path);
  static uint8_t buf[512];
  size_t len = 0;
  uint32_t start = millis();
  uint32_t end = start;
  if (file) {
    len = file.size();
    size_t flen = len;
    start = millis();
    while (len) {
      size_t toRead = len;
      if (toRead > 512) {
        toRead = 512;
      }
      file.read(buf, toRead);
      len -= toRead;
    }
    end = millis() - start;
    Serial.printf("%u bytes read for %u ms\n", flen, end);
    file.close();
  } else {
    Serial.println("Failed to open file for reading");
  }


  file = fs.open(path, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }

  size_t i;
  start = millis();
  for (i = 0; i < 2048; i++) {
    file.write(buf, 512);
  }
  end = millis() - start;
  Serial.printf("%u bytes written for %u ms\n", 2048 * 512, end);
  file.close();
}





/* ----------------------------  setup  -----------------------------------*/






void setup() {
  DEBUG.begin(115200);
  Serial2.begin(115200, SERIAL_8N1, 27, 26);             // ESP32 TX (26) → Mega RX1 (19), ESP32 RX (27) ← Mega TX1 (18)
  ESP32_MAIN.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);  // UART communication with Mega
  tft.init();
  tft.setRotation(3);

  showLoadingScreen();
  setupSDCard();
  DEBUG.println("[DEBUG] ESP32 Boot Successful!");
  irrecv.enableIRIn();  // Start the IR receiver

  pinMode(GREEN_LED, OUTPUT);
  digitalWrite(GREEN_LED, HIGH);  // Start with LED off
  pinMode(RED_LED, OUTPUT);
  digitalWrite(RED_LED, LOW);  // Start with LED off
  pinMode(BLUE_LED, OUTPUT);
  digitalWrite(BLUE_LED, LOW);  // Start with LED off

  mySpi.begin(XPT2046_CLK, XPT2046_MISO, XPT2046_MOSI, XPT2046_CS);
  ts.begin(mySpi);
  // Initialize Touchscreen with debug check
  if (!ts.begin(mySpi)) {
    Serial.println("[ERROR] Touchscreen init failed!");
  } else {
    Serial.println("[OK] Touchscreen init successful");
  }

  // Optional: Match screen rotation (try 0–3 to calibrate)
  ts.setRotation(3);  // You may need to experiment with this (try 1 or 3 for TFT rotation = 3)
  drawMenu();
}









/* ----------------------------  LOOP  -----------------------------------*/









void loop() {
  displayTimeOnTouchscreen(rtcTime);

  if (ESP32_MAIN.available()) {
    String receivedData = ESP32_MAIN.readStringUntil('\n');
    receivedData.trim();

    if (receivedData.startsWith("TIME:")) {
      rtcTime = receivedData.substring(5);  // Extract time from data
    }
  }
  checkInactivity();
  if (screensaverActive) updateScreensaver();

  if (irrecv.decode(&results)) {
    handleIRInput(results.value);
    irrecv.resume();
  }

  if (ts.tirqTouched() && ts.touched()) {
    TS_Point p = ts.getPoint();
    int touchX = map(p.x, 0, 4095, 0, tft.width());
    int touchY = map(p.y, 0, 4095, 0, tft.height());
    registerInteraction();
    if (!inSubMenu) {
      if (touchY >= firstMenuY && touchY <= firstMenuY + (menuLength * menuSpacing)) {
        int touchedItem = floor((touchY - firstMenuY) / (float)menuSpacing);
        touchedItem = constrain(touchedItem, 0, menuLength - 1);
        selectedMenu = touchedItem;
        handleMenuSelection(selectedMenu);
      }
    }

    if (inSubMenu && touchY >= backButtonY - 10 && touchY <= backButtonY + menuSpacing) {
      drawMenu();
    }

    delay(100);
  }
}
