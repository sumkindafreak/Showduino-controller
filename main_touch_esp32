#include <TFT_eSPI.h>
#include <XPT2046_Bitbang.h>

// --- Touchscreen Pins ---
#define MOSI_PIN 32
#define MISO_PIN 39
#define CLK_PIN  25
#define CS_PIN   33

// --- TFT & Touchscreen Instances ---
TFT_eSPI tft = TFT_eSPI();
XPT2046_Bitbang touchscreen(MOSI_PIN, MISO_PIN, CLK_PIN, CS_PIN);

// --- Button Struct ---
struct PillButton {
  const char* label;
  int x, y, w, h;
  bool pressed;
  void (*onPress)();
};
PillButton buttons[6];

// --- Menu Handlers ---
void showMainMenu();
void showWiFiMenu();
void showSDMenu();
void showShowMenu();
void showDiagnosticsMenu();
void showAddonsMenu();
void showSettingsMenu();

void wifiButtonHandler()      { Serial.println("WiFi button pressed"); showWiFiMenu(); }
void sdCardButtonHandler()    { Serial.println("SD Card button pressed"); showSDMenu(); }
void showMenuButtonHandler()  { Serial.println("Show Menu button pressed"); showShowMenu(); }
void diagnosticsButtonHandler(){ Serial.println("Diagnostics button pressed"); showDiagnosticsMenu(); }
void addonsButtonHandler()    { Serial.println("Add-ons button pressed"); showAddonsMenu(); }
void settingsButtonHandler()  { Serial.println("Settings button pressed"); showSettingsMenu(); }
void backToMainHandler()      { Serial.println("Back to Main Menu"); showMainMenu(); }

// --- Labels & Handlers (static for pointer validity) ---
static const char* mainLabels[6] = {"WiFi", "sd card", "show menu", "diagnostics", "add-ons", "settings"};
static void (*mainHandlers[6])() = {wifiButtonHandler, sdCardButtonHandler, showMenuButtonHandler,
                                    diagnosticsButtonHandler, addonsButtonHandler, settingsButtonHandler};

static const char* wifiLabels[6] = {"AP ON", "AP OFF", "Internet", "BT ON", "BT OFF", "Back"};
static void (*wifiHandlers[6])() = {nullptr, nullptr, nullptr, nullptr, nullptr, backToMainHandler};

static const char* sdLabels[6] = {"Back","","","","",""};
static void (*sdHandlers[6])() = {backToMainHandler,nullptr,nullptr,nullptr,nullptr,nullptr};

static const char* showLabels[6] = {"Back","","","","",""};
static void (*showHandlers[6])() = {backToMainHandler,nullptr,nullptr,nullptr,nullptr,nullptr};

static const char* diagLabels[6] = {"Back","","","","",""};
static void (*diagHandlers[6])() = {backToMainHandler,nullptr,nullptr,nullptr,nullptr,nullptr};

static const char* addonLabels[6] = {"Back","","","","",""};
static void (*addonHandlers[6])() = {backToMainHandler,nullptr,nullptr,nullptr,nullptr,nullptr};

static const char* settingsLabels[6] = {"Back","","","","",""};
static void (*settingsHandlers[6])() = {backToMainHandler,nullptr,nullptr,nullptr,nullptr,nullptr};

// --- Draw a pill button (narrow, tall) ---
void drawPillButton(PillButton &btn, bool highlight = false) {
  uint16_t color = highlight ? tft.color565(180, 0, 0) : TFT_RED;
  int radius = 16;
  tft.fillRoundRect(btn.x, btn.y, btn.w, btn.h, radius, color);
  tft.setTextColor(TFT_WHITE, color);
  tft.setTextDatum(MC_DATUM);
  tft.drawString(btn.label, btn.x + btn.w/2, btn.y + btn.h/2);
}

// --- Button Setup (narrow pill, tall, spaced for 320x240) ---
void setupButtons(const char* labels[6], void (*handlers[6])()) {
  int bw = 72;      // Narrow width
  int bh = 32;      // Tall height
  int bx = 75;      // Left margin
  int by = 38;
  int h_spacing = 30;
  int v_spacing = 32;
  tft.setTextDatum(MC_DATUM);
  for (int i = 0; i < 6; i++) {
    int row = i / 2;
    int col = i % 2;
    int x = bx + col * (bw + h_spacing);
    int y = by + row * (bh + v_spacing);
    buttons[i] = {labels[i], x, y, bw, bh, false, handlers[i]};
    if (labels[i] && *labels[i]) drawPillButton(buttons[i]);
  }
}
void setupBackButton(void (*handler)()) {
  buttons[0] = {"Back", 20, 200, 80, 30, false, handler};
  drawPillButton(buttons[0]);
  for (int i = 1; i < 6; i++) buttons[i].label = "";
}

// --- Main menu and submenus ---
void showMainMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextDatum(MC_DATUM);
  tft.drawString("Showduino Main Menu", 160, 18);
  setupButtons(mainLabels, mainHandlers);
  Serial.println("Displayed: Main Menu");
 // tft.fillScreen(TFT_BLACK);
  tft.setTextSize(1);
  tft.setTextDatum(TL_DATUM);
  tft.setTextColor(TFT_GREEN);
  tft.drawString("1 2 3 4", 10, 40);
  tft.setTextColor(TFT_RED);
  tft.drawString("5 6 7 8", 10, 52);
  tft.setTextColor(TFT_GREEN);
  tft.drawString("1 2 3 4", 10, 120);
  tft.setTextColor(TFT_RED);
  tft.drawString("5 6 7 8", 10, 132);
  tft.setTextColor(TFT_RED);
  tft.drawString("0 dmx", 10, 190);
  tft.setTextColor(TFT_WHITE);
  tft.drawString("selected", 10, 202);
  tft.setTextColor(TFT_WHITE);
  tft.drawString("show", 275, 40);
  tft.setTextColor(TFT_GREEN);
  tft.drawString("chamber", 275, 52);
  tft.setTextColor(TFT_WHITE);
  tft.drawString("system", 275, 120);
  tft.setTextColor(TFT_GREEN);
  tft.drawString("ok", 275, 132);
  tft.setTextColor(TFT_WHITE);
  tft.drawString("manual", 275, 190);
  tft.setTextColor(TFT_RED);
  tft.drawString("live", 275, 202);
}
void showWiFiMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_CYAN, TFT_BLACK);
  tft.setTextDatum(MC_DATUM);
  tft.drawString("WiFi Menu", 160, 18);
  setupButtons(wifiLabels, wifiHandlers);
  Serial.println("Displayed: WiFi Menu");
}

void showSDMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextDatum(MC_DATUM);
  tft.drawString("SD Card Menu", 160, 18);
  tft.setTextDatum(TL_DATUM);
  tft.drawString("- show1.shdo", 30, 80, 2);
  tft.drawString("- show2.shdo", 30, 110, 2);
  tft.drawString("- config.txt", 30, 140, 2);
  setupButtons(sdLabels, sdHandlers);
  Serial.println("Displayed: SD Card Menu");
}

void showShowMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextDatum(MC_DATUM);
  tft.drawString("Show Menu", 160, 18);
  tft.setTextDatum(TL_DATUM);
  tft.drawString("- TheChamber.shdo", 30, 80, 2);
  tft.drawString("- CoffinJump.shdo", 30, 110, 2);
  tft.drawString("- GhostFX.shdo", 30, 140, 2);
  setupButtons(showLabels, showHandlers);
  Serial.println("Displayed: Show Menu");
}

void showDiagnosticsMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextDatum(MC_DATUM);
  tft.drawString("Diagnostics", 160, 18);
  tft.setTextDatum(TL_DATUM);
  tft.drawString("Voltage: OK", 30, 80, 2);
  tft.drawString("RTC: Synced", 30, 110, 2);
  tft.drawString("Relays: Ready", 30, 140, 2);
  setupButtons(diagLabels, diagHandlers);
  Serial.println("Displayed: Diagnostics Menu");
}

void showAddonsMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextDatum(MC_DATUM);
  tft.drawString("Add-ons Menu", 160, 18);
  tft.setTextDatum(TL_DATUM);
  tft.drawString("- Lantern FX", 30, 80, 2);
  tft.drawString("- R3 Terminal", 30, 110, 2);
  tft.drawString("- Smoke Controller", 30, 140, 2);
  setupButtons(addonLabels, addonHandlers);
  Serial.println("Displayed: Add-ons Menu");
}

void showSettingsMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextDatum(MC_DATUM);
  tft.drawString("Settings Menu", 160, 18);
  tft.setTextDatum(TL_DATUM);
  tft.drawString("- Brightness: 100%", 30, 80, 2);
  tft.drawString("- Volume A: 75%", 30, 110, 2);
  tft.drawString("- Volume B: 65%", 30, 140, 2);
  setupButtons(settingsLabels, settingsHandlers);
  Serial.println("Displayed: Settings Menu");
}

// --- Touch Handler for XPT2046_Bitbang ---
// Uses touch.x and touch.y directly (already screen pixels)
void handleTouchInput() {
  TouchPoint touch = touchscreen.getTouch();
  if (touch.zRaw != 0) {
    int x = touch.x;
    int y = touch.y;
    Serial.print("Touch @ X: ");
    Serial.print(x);
    Serial.print(", Y: ");
    Serial.print(y);
    Serial.print(", Z: ");
    Serial.println(touch.zRaw);

    tft.fillCircle(x, y, 3, TFT_BLUE); // Visual feedback
    for (int i = 0; i < 6; i++) {
      PillButton &btn = buttons[i];
      if (!btn.label || !*btn.label) continue;
      bool hit = x >= btn.x && x <= (btn.x + btn.w) &&
                 y >= btn.y && y <= (btn.y + btn.h);
      if (hit && !btn.pressed) {
        Serial.print("Button pressed: ");
        Serial.println(btn.label);
        btn.pressed = true;
        drawPillButton(btn, true);
        delay(150);
        drawPillButton(btn, false);
        btn.pressed = false;
        if (btn.onPress) btn.onPress();
      }
    }
    delay(200); // debounce
  }
}



void showTerminalSplash() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextDatum(TL_DATUM);
  tft.setTextColor(TFT_GREEN);
  tft.setTextSize(1);
  const char *bootLines[] = {
    "> Initializing SHOWDUINO system...",
    "> Loading interface modules...",
    "> Checking relays and ports...",
    "> Checking sd card functions...",
    "> System online.",
    "> Launching control terminal..."
  };
  for (int i = 0; i < 5; i++) {
    tft.drawString(bootLines[i], 10, 10 + i * 15);
    delay(700);
  }
}
// --- Setup ---
void setup() {
  Serial.begin(115200);
  tft.begin();
  tft.setRotation(1); // portrait or landscape as desired
  tft.fillScreen(TFT_BLACK);
  touchscreen.begin();
  showTerminalSplash();
  
  Serial.println("Showduino pill button UI ready");
  showMainMenu();
}

// --- Main Loop ---
void loop() {
  handleTouchInput();
}
